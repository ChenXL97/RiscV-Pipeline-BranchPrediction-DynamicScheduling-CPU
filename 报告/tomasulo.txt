为了简化设计，每个功能部件都只设置1个

全局stall信号应该由tomasulo的给出而不是ex模块。stall信号并不
会暂停ex模块。全局stall信号给出的条件：rob满，全局stall信号取
消的条件：rob不满。

flush信号仍然由ROB部件给出，当预测地址和实际地址不符合并且分支
指令可以被提交写回的情况下冲刷。冲刷的时候，包括ROB在内的除PC外
的所有模块，全部冲刷掉。

rob调度的条件：1. rob中有未被调度的指令或有新到来的指令 2. 1中
的指令中存在至少一条，满足：无数据冲突和结构冲突。
rob调度/发射的时机：


无数据冲突：参考data forwarding的设计
结构冲突：看当前指令所需要的运算部件是否未被占用


动态调度下，EX段有可能在同一个周期执行完多条指令。用func_part_done
字段来指示哪些运算部件是执行完了的（故该部件为下次可用的）。该信号配
合ex_done传递到rob中，rob以此更新调度信息。
EX段需要考虑如何处理一个周期多条指令执行完的情况。考虑的点为：多个指令
的运算结果怎么处理、多个指令的done信号怎么处理、如果这批指令里夹了分支
指令怎么处理。
当EX段在某个周期中有多条指令执行完时，在func_part_done字段置多个1.
因为多条指令执行完意味着有多个运算部件执行完。同时EX段把这些运算完成
的部件的运算结果传回ROB，配合func_part_done和时序逻辑ex_done，让ROB
把每个部件的运算结果都存放到对应指令的ROB表项中，同时置ROB表项的done
字段为1.





head和end指针：
head指针标志新指令写入的位置
end指针标志最老的一个未写回的指令的位置
end指针指向的rob项，如果done=1，则可以提交写回。考虑到regfile的接口
限制，rob一个周期仅提交写回一项。写回后end++.
如果head=end且指向的表项busy=1，则rob满。




数据相关标记位的相关寄存器
    目的寄存器     相关指令     是否相关    正在使用    已经发射
    [4:0]          [3:0]       [0:0]       [0:0]      [0:0]
新指令进入ROB的时候，做一次数据相关检查，置相关标志位。
每次ex_done信号输入，都检查并更新相关标志位列表。
ex_done会在时钟上升沿有效，此时传入的fun_part_done标识哪几个部件
运算完成，进而可以推导出是哪几条指令运算完成。
当A指令运算完成时，以他的index为起始、headpt为终点，遍历搜索数据相关
指令为A的指令，并置其是否相关字段为否。



硬件相关标记为的相关寄存器
    全局硬件占用表      硬件相关
    [14:0]              [0:0]
新指令进入ROB的时候，做一次硬件相关检查。
指令欲使用的硬件在全局硬件占用表中不空闲时，置硬件相关标志位。
每次ex_done信号输入，都检查并更新相关标志位列表。
ex_done会在时钟上升沿有效，此时传入的func_part_done标识哪几个部件
运算完成，由此更新全局硬件占用表。
全局硬件占用表更新后，以end为起点，head为终点，遍历搜索被置硬件相关
的指令。如果这些指令的硬件相关可以被func_part_done释放，则置其硬件
相关标记为0.
指令发射后，需要更新全局硬件占用表。并以end为起点，head为终点，遍历
搜索指令并置硬件标志位.




指令发射：
1个周期向EXE发射1条指令，发射内容为ROB中的内容、regfile数据以及imm_data
选取既不硬件相关，又不数据相关的指令发射。以end为起点，head为终点，遍历
搜索满足条件的指令。如果找到一条，发射，并终止搜索；如果找到最后也没找到，
则本周期不发射指令。
指令发射后，需要更新全局硬件占用表。


指令提交写回：
指令提交写回时，选中要写回的寄存器，准备好要写回的数据内容并给出1个周期
的数据有效信号。
写回完成后，ROB回收该指令占用的所有资源并将这些资源复位。


